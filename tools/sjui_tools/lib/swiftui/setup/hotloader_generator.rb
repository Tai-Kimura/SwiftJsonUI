# frozen_string_literal: true

require 'fileutils'

module SjuiTools
  module SwiftUI
    module Setup
      class HotLoaderGenerator
        def self.generate(output_path)
          hotloader_code = <<~SWIFT
          //
          //  HotLoaderSetup.swift
          //  Generated by sjui_tools
          //
          //  This file configures HotLoader for SwiftUI apps to enable
          //  hot reloading of JSON layouts during development.
          //
          
          import SwiftUI
          import SwiftJsonUI
          
          /// HotLoader configuration for SwiftUI apps
          /// Add this to your App struct to enable hot reloading
          public struct HotLoaderSetup {
              public static func configure() {
                  #if DEBUG
                  // Copy JSON files to cache directory
                  JSONLayoutLoader.copyResourcesToCache()
                  
                  // Enable HotLoader for debug builds
                  HotLoader.instance.isHotLoadEnabled = true
                  
                  // Configure HotLoader settings if needed
                  // You can customize the IP and port in Info.plist or sjui.config
                  Logger.debug("[HotLoader] Enabled for SwiftUI app")
                  #endif
              }
              
              public static func disable() {
                  #if DEBUG
                  HotLoader.instance.isHotLoadEnabled = false
                  Logger.debug("[HotLoader] Disabled")
                  #endif
              }
          }
          
          /// SwiftUI App modifier for HotLoader
          public struct HotLoaderModifier: ViewModifier {
              public func body(content: Content) -> some View {
                  content
                      .onAppear {
                          HotLoaderSetup.configure()
                      }
                      .onReceive(NotificationCenter.default.publisher(for: UIApplication.didBecomeActiveNotification)) { _ in
                          HotLoaderSetup.configure()
                      }
                      .onReceive(NotificationCenter.default.publisher(for: UIApplication.willResignActiveNotification)) { _ in
                          HotLoaderSetup.disable()
                      }
                      .onReceive(NotificationCenter.default.publisher(for: UIApplication.willTerminateNotification)) { _ in
                          HotLoaderSetup.disable()
                      }
              }
          }
          
          extension View {
              /// Enables HotLoader for this view
              /// Add this modifier to your root view in the App struct
              public func enableHotLoader() -> some View {
                  self.modifier(HotLoaderModifier())
              }
          }
          
          // MARK: - Usage Example
          /*
          @main
          struct YourApp: App {
              var body: some Scene {
                  WindowGroup {
                      ContentView()
                          .enableHotLoader() // Add this line to enable hot reloading
                  }
              }
          }
          
          // Or manually in your views:
          struct ContentView: View {
              var body: some View {
                  VStack {
                      // Your content here
                  }
                  .onAppear {
                      HotLoaderSetup.configure()
                  }
              }
          }
          */
          SWIFT
          
          File.write(output_path, hotloader_code)
          puts "Generated HotLoader setup file: #{output_path}"
        end
      end
    end
  end
end
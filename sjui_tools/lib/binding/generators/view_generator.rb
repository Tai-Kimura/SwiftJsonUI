# frozen_string_literal: true

require_relative 'base_generator'

module SjuiTools
  module Binding
    module Generators
      class ViewGenerator < BaseGenerator
        def generate
          puts "Generating view files for: #{class_name}"
          if options[:root]
            puts "Setting as root view controller"
          end
          
          # Create directories if needed
          ensure_directories
          
          # Generate files
          generate_view_controller
          generate_json_file
          
          # Update AppDelegate/SceneDelegate if root option is specified
          if options[:root]
            update_scene_delegate
          end
          
          puts "\nView generation completed successfully!"
          puts "Next steps:"
          snake_name = snake_name_from_camel(class_name)
          puts "  - Edit #{relative_path(File.join(layouts_path, "#{snake_name}.json"))} to customize your layout"
          puts "  - Run 'sjui build' to generate binding files"
          if options[:root]
            puts "  - Your app will now launch with #{class_name}ViewController as the initial screen"
          end
        end

        private

        def ensure_directories
          ensure_directory(view_path)
          ensure_directory(layouts_path)
          ensure_directory(bindings_path)
          # Create View/ClassName folder
          ensure_directory(File.join(view_path, class_name))
        end

        def generate_view_controller
          file_path = File.join(view_path, class_name, "#{class_name}ViewController.swift")
          
          if file_exists?(file_path)
            puts "Skipping: #{relative_path(file_path)} (already exists)"
            return
          end
          
          content = view_controller_template
          write_file(file_path, content)
          add_to_xcode_project(file_path, 'View')
        end

        def generate_json_file
          snake_name = snake_name_from_camel(class_name)
          file_path = File.join(layouts_path, "#{snake_name}.json")
          
          if file_exists?(file_path)
            puts "Skipping: #{relative_path(file_path)} (already exists)"
            return
          end
          
          content = json_template
          write_file(file_path, content)
          add_to_xcode_project(file_path, 'Layouts')
        end

        def view_controller_template
          snake_name = snake_name_from_camel(class_name)
          
          <<~SWIFT
            import UIKit
            import SwiftJsonUI
            
            class #{class_name}ViewController: BaseViewController {
                
                override var layoutPath: String {
                    get {
                        return "#{snake_name}"
                    }
                }
                
                private lazy var _binding = #{class_name}Binding(viewHolder: self)
                
                override var binding: BaseBinding {
                    get {
                        return _binding
                    }
                }
                    
                class func newInstance() -> #{class_name}ViewController {
                    let v = #{class_name}ViewController()
                    v.title = "title_#{snake_name}".localized()
                    return v
                }
                
                override func viewDidLoad() {
                    super.viewDidLoad()
                    self.view.addSubview(UIViewCreator.createView(layoutPath, target: self)!)
                    attachViewToProperty()
                }
            }
          SWIFT
        end

        def json_template
          content = {
            "type" => "SafeAreaView",
            "id" => "main_view",
            "width" => "matchParent",
            "height" => "matchParent",
            "background" => "FFFFFF",
            "child" => [
              {
                "type" => "Label",
                "id" => "title_label",
                "text" => "Welcome to your new view!",
                "textAlignment" => "center"
              }
            ]
          }
          JSON.pretty_generate(content)
        end

        def binding_template
          # This is generated by the build command, not here
          nil
        end

        def snake_name_from_camel(camel_name)
          camel_name.gsub(/([A-Z])/, '_\1').downcase.sub(/^_/, '')
        end

        def update_scene_delegate
          # Find SceneDelegate.swift file
          project_dir = Core::ProjectFinder.project_dir
          scene_delegate_path = find_scene_delegate_file(project_dir)
          
          if scene_delegate_path.nil?
            puts "Warning: Could not find SceneDelegate.swift file"
            return
          end

          puts "Updating SceneDelegate: #{scene_delegate_path}"
          
          # Read SceneDelegate.swift content
          content = File.read(scene_delegate_path)
          
          # Update SceneDelegate safely
          updated_content = safely_update_scene_delegate(content, class_name)
          
          # Write back to file
          File.write(scene_delegate_path, updated_content)
          puts "SceneDelegate updated successfully"
        end

        def find_scene_delegate_file(project_dir)
          # Search for SceneDelegate.swift recursively from project directory
          Dir.glob("#{project_dir}/**/SceneDelegate.swift").first
        end

        def safely_update_scene_delegate(content, camel_name)
          # Update scene(_:willConnectTo:options:) method
          method_start = content.index(/func scene\([^)]+willConnectTo[^{]*\{/)
          
          if method_start
            # Find method end by counting braces
            brace_count = 0
            method_end = nil
            i = method_start
            
            while i < content.length
              if content[i] == '{'
                brace_count += 1
              elsif content[i] == '}'
                brace_count -= 1
                if brace_count == 0
                  method_end = i
                  break
                end
              end
              i += 1
            end
            
            if method_end
              # Extract method content
              method_content = content[method_start..method_end]
              
              # Check if rootViewController is already set
              if method_content.include?("window?.rootViewController")
                # Update existing root view controller
                updated_method = method_content.gsub(/(\w+)ViewController\.newInstance\(\)/, "#{camel_name}ViewController.newInstance()")
                content[method_start..method_end] = updated_method
                puts "Updated root ViewController to #{camel_name}ViewController in existing SceneDelegate setup"
              else
                # Generate new content
                new_method = generate_complete_scene_method(camel_name)
                content[method_start..method_end] = new_method
                puts "Added new root ViewController setup for #{camel_name}ViewController"
              end
            end
          else
            puts "Warning: Could not find scene(_:willConnectTo:options:) method"
          end
          
          content
        end

        def generate_complete_scene_method(camel_name)
          <<~SWIFT.chomp
            func scene(_ scene: UIScene, willConnectTo session: UISceneSession, options connectionOptions: UIScene.ConnectionOptions) {
                // Use this method to optionally configure and attach the UIWindow `window` to the provided UIWindowScene `scene`.
                // If using a storyboard, the `window` property will automatically be initialized and attached to the scene.
                // This delegate does not imply the connecting scene or session are new (see `application:configurationForConnectingSceneSession` instead).
                guard let windowScene = (scene as? UIWindowScene) else { return }
                
                window = UIWindow(windowScene: windowScene)
                let rootViewController = #{camel_name}ViewController.newInstance()
                let navigationController = UINavigationController(rootViewController: rootViewController)
                window?.rootViewController = navigationController
                window?.makeKeyAndVisible()
            }
          SWIFT
        end
      end
    end
  end
end
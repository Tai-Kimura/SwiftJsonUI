# frozen_string_literal: true

require 'optparse'
require 'fileutils'
require_relative '../../core/config_manager'
require_relative '../../core/project_finder'

module SjuiTools
  module CLI
    module Commands
      class Setup
        def run(args)
          options = parse_options(args)
          
          # Setup project paths
          unless Core::ProjectFinder.setup_paths
            puts "Error: Could not find project file (.xcodeproj)"
            puts "Please run this command in an iOS project directory"
            exit 1
          end
          
          puts "Setting up SwiftJsonUI project..."
          
          # Create directory structure
          create_directories
          
          # Generate base files
          generate_base_files
          
          # Setup library if Xcode project
          if Core::ProjectFinder.project_file_path&.end_with?('.xcodeproj')
            setup_library
          end
          
          puts "\nSetup complete!"
          puts "Next steps:"
          puts "  1. Add SwiftJsonUI library to your project (via SPM or CocoaPods)"
          puts "  2. Run 'sjui g view HomeView' to generate your first view"
        end

        private

        def parse_options(args)
          options = {}
          
          OptionParser.new do |opts|
            opts.banner = "Usage: sjui setup [options]"
            
            opts.on('-h', '--help', 'Show this help message') do
              puts opts
              exit
            end
          end.parse!(args)
          
          options
        end

        def create_directories
          config = Core::ConfigManager.load_config
          source_path = Core::ProjectFinder.get_full_source_path
          project_dir = Core::ProjectFinder.project_dir
          
          # Directories to create
          directories = [
            File.join(source_path, config['layouts_directory']),
            File.join(source_path, config['bindings_directory']),
            File.join(source_path, config['view_directory']),
            File.join(source_path, config['styles_directory']),
            File.join(source_path, 'Core'),
            File.join(source_path, 'Core', 'Base'),
            File.join(source_path, 'Core', 'UI')
          ]
          
          directories.each do |dir|
            unless Dir.exist?(dir)
              FileUtils.mkdir_p(dir)
              puts "Created directory: #{dir}"
            end
          end
        end

        def generate_base_files
          source_path = Core::ProjectFinder.get_full_source_path
          
          # Generate BaseViewController
          generate_base_view_controller(source_path)
          
          # Generate BaseBinding
          generate_base_binding(source_path)
          
          # Generate UIViewCreator
          generate_ui_view_creator(source_path)
          
          # Generate BaseCollectionViewCell
          generate_base_collection_view_cell(source_path)
          
          # Add to Xcode project if applicable
          if Core::ProjectFinder.project_file_path&.end_with?('.xcodeproj')
            add_core_files_to_project
          end
        end

        def generate_base_view_controller(source_path)
          file_path = File.join(source_path, 'Core', 'Base', 'BaseViewController.swift')
          return if File.exist?(file_path)
          
          content = <<~SWIFT
            //
            //  BaseViewController.swift
            //  Generated by SwiftJsonUI
            //
            
            import UIKit
            import SwiftJsonUI
            
            class BaseViewController: UIViewController {
                var layoutPath: String {
                    get {
                        fatalError("layoutPath must be overridden")
                    }
                }
                
                var binding: BaseBinding {
                    get {
                        fatalError("binding must be overridden")
                    }
                }
                
                override func viewDidLoad() {
                    super.viewDidLoad()
                    setupView()
                }
                
                func setupView() {
                    view.backgroundColor = .white
                }
                
                func attachViewToProperty() {
                    binding.attachViewToProperty()
                }
                
                func bind() {
                    binding.bind()
                }
            }
            
            // BaseRootViewController for root view controllers
            class BaseRootViewController: BaseViewController {
                override func viewDidLoad() {
                    super.viewDidLoad()
                    
                    // Setup navigation bar for root view
                    navigationController?.navigationBar.prefersLargeTitles = true
                }
            }
          SWIFT
          
          File.write(file_path, content)
          puts "Created: Core/Base/BaseViewController.swift"
        end

        def generate_base_binding(source_path)
          file_path = File.join(source_path, 'Core', 'Base', 'BaseBinding.swift')
          return if File.exist?(file_path)
          
          content = <<~SWIFT
            //
            //  BaseBinding.swift
            //  Generated by SwiftJsonUI
            //
            
            import UIKit
            import SwiftJsonUI
            
            class BaseBinding: Binding {
                func attachViewToProperty() {
                    // Override in subclasses to attach views to properties
                }
                
                func bind() {
                    // Override in subclasses to bind data to views
                }
                
                func bindView() {
                    // Override in subclasses to bind view events
                }
            }
          SWIFT
          
          File.write(file_path, content)
          puts "Created: Core/Base/BaseBinding.swift"
        end

        def generate_ui_view_creator(source_path)
          file_path = File.join(source_path, 'Core', 'UI', 'UIViewCreator.swift')
          return if File.exist?(file_path)
          
          content = <<~SWIFT
            //
            //  UIViewCreator.swift
            //  Generated by SwiftJsonUI
            //
            
            import UIKit
            import SwiftJsonUI
            
            class UIViewCreator {
                static func createView(_ layoutPath: String, target: Any?) -> UIView? {
                    return ViewCreator.shared.create(layoutPath, target: target)
                }
            }
          SWIFT
          
          File.write(file_path, content)
          puts "Created: Core/UI/UIViewCreator.swift"
        end

        def generate_base_collection_view_cell(source_path)
          file_path = File.join(source_path, 'Core', 'Base', 'BaseCollectionViewCell.swift')
          return if File.exist?(file_path)
          
          content = <<~SWIFT
            //
            //  BaseCollectionViewCell.swift
            //  Generated by SwiftJsonUI
            //
            
            import UIKit
            import SwiftJsonUI
            
            class BaseCollectionViewCell: UICollectionViewCell {
                var layoutPath: String {
                    get {
                        fatalError("layoutPath must be overridden")
                    }
                }
                
                var binding: BaseBinding? {
                    get {
                        return nil
                    }
                }
                
                override init(frame: CGRect) {
                    super.init(frame: frame)
                    setupView()
                }
                
                required init?(coder: NSCoder) {
                    super.init(coder: coder)
                    setupView()
                }
                
                func setupView() {
                    if let view = UIViewCreator.createView(layoutPath, target: self) {
                        contentView.addSubview(view)
                        view.translatesAutoresizingMaskIntoConstraints = false
                        NSLayoutConstraint.activate([
                            view.topAnchor.constraint(equalTo: contentView.topAnchor),
                            view.leadingAnchor.constraint(equalTo: contentView.leadingAnchor),
                            view.trailingAnchor.constraint(equalTo: contentView.trailingAnchor),
                            view.bottomAnchor.constraint(equalTo: contentView.bottomAnchor)
                        ])
                    }
                    
                    binding?.attachViewToProperty()
                }
                
                func bind() {
                    binding?.bind()
                }
            }
          SWIFT
          
          File.write(file_path, content)
          puts "Created: Core/Base/BaseCollectionViewCell.swift"
        end

        def add_core_files_to_project
          require_relative '../../binding/xcode_project_manager'
          
          project_path = Core::ProjectFinder.project_file_path
          source_path = Core::ProjectFinder.get_full_source_path
          
          manager = Binding::XcodeProjectManager.new(project_path)
          
          core_files = [
            { path: File.join(source_path, 'Core', 'Base', 'BaseViewController.swift'), group: 'Base' },
            { path: File.join(source_path, 'Core', 'Base', 'BaseBinding.swift'), group: 'Base' },
            { path: File.join(source_path, 'Core', 'Base', 'BaseCollectionViewCell.swift'), group: 'Base' },
            { path: File.join(source_path, 'Core', 'UI', 'UIViewCreator.swift'), group: 'UI' }
          ]
          
          manager.add_core_files(core_files)
          puts "Added Core files to Xcode project"
        end

        def setup_library
          # TODO: Implement library setup (SPM/CocoaPods)
          puts "\nNote: Please add SwiftJsonUI library manually via:"
          puts "  - Swift Package Manager: https://github.com/mcprol/SwiftJsonUI-ios"
          puts "  - CocoaPods: pod 'SwiftJsonUI'"
        end
      end
    end
  end
end